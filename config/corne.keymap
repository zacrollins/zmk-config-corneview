/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"

// LAYERS
#define DEFAULT 0
#define NUM     1
#define SYM     2
#define NAV     3
#define FUNC    4

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

// &sk {  // sticky-key config
//     release-after-ms = <900>;  // release after 0.6s
//     quick-release;             // no double capitalization when rolling keys
// };

// &sl {  // sticky-layer config
//     ignore-modifiers;          // allow chording sticky mods & layers
// };

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* HomeRow Mods */

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"                            // keyposition helpers
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumb keys

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

// tap: backspace | shift + tap: delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/* Keymap */

ZMK_CONDITIONAL_LAYER(NUM SYM, FUNC)  // FN + NUM --> SYS

ZMK_LAYER(base,
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
//|  TAB         |  Q           |  W           |  E           |  R           |  T           |   |  Y           |  U           |  I           |  O           |  P           | BKSP (DEL)   |
    &kp TAB        &kp Q          &kp W          &kp E          &kp R          &kp T              &kp Y          &kp U          &kp I          &kp O          &kp P          &bs_del
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|  CTRL [ESC]  |  A (LALT)    |  S [LCTRL]  |  D [LGUI]     |  F [LSHFT]   |  G           |   |  H           |  J  [RSHFT]  |  K [RGUI]    |  L [RCTRL]   |  ; [RALT]    |  '           |
    &mt LCTRL ESC  &hml LALT A    &hml LCTRL S  &hml LGUI D     &hml LSHFT F   &kp G              &kp H          &hmr RSHFT J   &hmr RGUI K    &hmr RCTRL    &hmr RALT SEMI  &kp SQT
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|  SHFT        |  Z           |  X           |  C           |  V           |  B           |   |  N           |  M           |  ,           |  .           |  /           |  ENT         |
    &kp LSHFT      &kp Z          &kp X          &kp C          &kp V          &kp B              &kp N          &kp M          &kp COMMA      &kp DOT        &kp FSLH       &kp RET
//╰──────────────┴──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
//                                             |  ALT         |  ENT         |  TAB {NUM}   |   |  BKSP {SYM}  |  SPC         |  SHFT        |
                                                 &kp LALT       &lt NAV RET   &lt NUM TAB        &lt SYM BSPC   &kp SPACE      &kp RSHFT
//                                             ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(num,
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
//|  TAB         |  1           |  2           |  3           |  4           |  5           |   |  6           |  7           |  8           |  9           |  0           |  BKSP        |
    &kp TAB        &kp N1         &kp N2         &kp N3         &kp N4         &kp N5             &kp N6         &kp N7         &kp N8         &kp N9         &kp N0         &kp BSPC
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|              |              |              |              |              |              |   |              |  4           |  5           |  6           |  +           |              |
    ___            ___            ___            ___            ___            ___                ___            &kp N4         &kp UP         &kp N6         &kp PLUS       ___
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|  SHFT        |              |              |              |              |              |   |  &           |  1           |  2           |  3           |  =           |              |
    &kp LSHFT      ___            ___            ___            ___            ___                &kp AMPS       &kp N1        &kp N2         &kp N3          &kp EQUAL      ___
//╰──────────────┴──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
//                                             |              |              |              |   |              |  0           |  .           |
                                                 ___            ___            ___                ___            &kp N0         &kp DOT
//                                             ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(sym,
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
//| ~            |  !           |  @           |  #           |  $           |  %           |   |  ^           |  &           |  *           |  (           |  )           |  BKSP        |
    &kp TILDE      &kp EXCL       &kp AT         &kp HASH       &kp DLLR       &kp PRCNT          &kp CARET      &kp AMPS       &kp KP_MULTIPLY &kp LPAR      &kp RPAR       &kp BSPC
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|              |              |              |              |              |              |   |  -           |  =           |  [           |  ]           |  \           |  `           |
    XXX            ___            ___            ___            ___            ___                &kp MINUS      &kp EQUAL      &kp LBKT       &kp RBKT       &kp BSLH       &kp GRAVE
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|              |              |              |              |              |              |   |  _           |  +           |  {           |  }           |  "|"         |  ~           |
    XXX            ___            ___            ___            ___            ___                &kp UNDER      &kp PLUS       &kp LBRC       &kp RBRC       &kp PIPE       &kp TILDE
//╰──────────────┴──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
//                                             |              |              |              |   |              |              |              |
                                                 ___            ___            ___                ___            ___            ___
//                                             ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(nav,
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
//|              |              |              |              |              |              |   |              |              |              |              |              |              |
    xxx            ___            ___            ___            ___            ___                ___            ___            ___            ___            ___            ___
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|              |              |              |              |              |              |   |  LEFT        |  DOWN        |  UP          |  RIGHT       |              |              |
    xxx            ___            ___            ___            ___            ___                &kp LEFT       &kp DOWN      &kp UP         &kp RIGHT       ___            ___
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|              |              |              |              |              |              |   |  HOME        |  PAGE_DN     |  PAGE_UP     |  END         |              |              |
    XXX            ___            ___            ___            ___            ___                &kp HOME       &kp PG_UP      &kp PG_UP      &kp END        ___            ___
//╰──────────────┴──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
//                                             |              |              |              |   |              |              |              |
                                                 ___            ___            ___                ___            ___            ___
//                                             ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(func,
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
//|  `           |  F1          |  F2          |  F3          |  F4          |  F5          |   |  F6          |  F7          |  F8          |  F9          |  F10         |              |
    &kp GRAVE      &kp F1         &kp F2         &kp F3         &kp F4         &kp F5             &kp F6         &kp F7         &kp F8         &kp F9         &kp F10        XXX
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|              |              |              |              |              |              |   |  MUTE        |  VOL_DOWN    |  VOL_UP      |              |  F11         |              |
    XXX            XXX            XXX            XXX            XXX            XXX                &kp C_MUTE     &kp C_VOL_DN   &kp C_VOL_UP   XXX            &kp F11        XXX
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤──────────────┤
//|              |  BT1         |  BT2         |  BT3         |  BT4         |  BT_Clear    |   |              |              |              |              |  F12         |              |
    XXX            &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_CLR         XXX            XXX            XXX            XXX            &kp F12        XXX
//╰──────────────┴──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤   ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
//                                             |  SYS_RESET   |  BOOTLOADER  |              |   |              |  BOOTLOADER  |  SYS_RESET   |
                                                 &sys_reset     &bootloader    ___                ___            &bootloader    &sys_reset
//                                             ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
)